// Auto-generated. Do not edit!

// (in-package lidar_obstacle_detector.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let Obstacles = require('./Obstacles.js');

//-----------------------------------------------------------

class fusion2lidarResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.obstacles = null;
    }
    else {
      if (initObj.hasOwnProperty('obstacles')) {
        this.obstacles = initObj.obstacles
      }
      else {
        this.obstacles = new Obstacles();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type fusion2lidarResult
    // Serialize message field [obstacles]
    bufferOffset = Obstacles.serialize(obj.obstacles, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type fusion2lidarResult
    let len;
    let data = new fusion2lidarResult(null);
    // Deserialize message field [obstacles]
    data.obstacles = Obstacles.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += Obstacles.getMessageSize(object.obstacles);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'lidar_obstacle_detector/fusion2lidarResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '12f6f75231b17523dfa33b84d74feebd';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Result definition
    lidar_obstacle_detector/Obstacles obstacles
    
    
    ================================================================================
    MSG: lidar_obstacle_detector/Obstacles
    Obstacle[] obstacles
    
    ================================================================================
    MSG: lidar_obstacle_detector/Obstacle
    string Class
    float64 xCenter
    float64 yCenter
    float64 zCenter
    float64 width
    float64 length
    float64 height
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new fusion2lidarResult(null);
    if (msg.obstacles !== undefined) {
      resolved.obstacles = Obstacles.Resolve(msg.obstacles)
    }
    else {
      resolved.obstacles = new Obstacles()
    }

    return resolved;
    }
};

module.exports = fusion2lidarResult;
