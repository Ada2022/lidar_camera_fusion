// Generated by gencpp from file sensor_fusion/fusion2yoloResult.msg
// DO NOT EDIT!


#ifndef SENSOR_FUSION_MESSAGE_FUSION2YOLORESULT_H
#define SENSOR_FUSION_MESSAGE_FUSION2YOLORESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_fusion/BoundingBoxes.h>

namespace sensor_fusion
{
template <class ContainerAllocator>
struct fusion2yoloResult_
{
  typedef fusion2yoloResult_<ContainerAllocator> Type;

  fusion2yoloResult_()
    : id(0)
    , bounding_boxes()  {
    }
  fusion2yoloResult_(const ContainerAllocator& _alloc)
    : id(0)
    , bounding_boxes(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef  ::sensor_fusion::BoundingBoxes_<ContainerAllocator>  _bounding_boxes_type;
  _bounding_boxes_type bounding_boxes;





  typedef boost::shared_ptr< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> const> ConstPtr;

}; // struct fusion2yoloResult_

typedef ::sensor_fusion::fusion2yoloResult_<std::allocator<void> > fusion2yoloResult;

typedef boost::shared_ptr< ::sensor_fusion::fusion2yoloResult > fusion2yoloResultPtr;
typedef boost::shared_ptr< ::sensor_fusion::fusion2yoloResult const> fusion2yoloResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_fusion::fusion2yoloResult_<ContainerAllocator1> & lhs, const ::sensor_fusion::fusion2yoloResult_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.bounding_boxes == rhs.bounding_boxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_fusion::fusion2yoloResult_<ContainerAllocator1> & lhs, const ::sensor_fusion::fusion2yoloResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_fusion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f28a5afc6bea5150fc58096d7a9b6801";
  }

  static const char* value(const ::sensor_fusion::fusion2yoloResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf28a5afc6bea5150ULL;
  static const uint64_t static_value2 = 0xfc58096d7a9b6801ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_fusion/fusion2yoloResult";
  }

  static const char* value(const ::sensor_fusion::fusion2yoloResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result definition\n"
"int16 id\n"
"sensor_fusion/BoundingBoxes bounding_boxes\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sensor_fusion/BoundingBoxes\n"
"Header header\n"
"Header image_header\n"
"BoundingBox[] bounding_boxes\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_fusion/BoundingBox\n"
"float64 probability\n"
"int64 xmin\n"
"int64 ymin\n"
"int64 xmax\n"
"int64 ymax\n"
"int16 id\n"
"string Class\n"
;
  }

  static const char* value(const ::sensor_fusion::fusion2yoloResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.bounding_boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fusion2yoloResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_fusion::fusion2yoloResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_fusion::fusion2yoloResult_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "bounding_boxes: ";
    s << std::endl;
    Printer< ::sensor_fusion::BoundingBoxes_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_boxes);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_FUSION_MESSAGE_FUSION2YOLORESULT_H
