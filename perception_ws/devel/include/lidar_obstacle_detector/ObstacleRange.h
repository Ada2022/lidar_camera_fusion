// Generated by gencpp from file lidar_obstacle_detector/ObstacleRange.msg
// DO NOT EDIT!


#ifndef LIDAR_OBSTACLE_DETECTOR_MESSAGE_OBSTACLERANGE_H
#define LIDAR_OBSTACLE_DETECTOR_MESSAGE_OBSTACLERANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace lidar_obstacle_detector
{
template <class ContainerAllocator>
struct ObstacleRange_
{
  typedef ObstacleRange_<ContainerAllocator> Type;

  ObstacleRange_()
    : Class()
    , xmin(0.0)
    , ymin(0.0)
    , zmin(0.0)
    , xmax(0.0)
    , ymax(0.0)
    , zmax(0.0)
    , points()  {
    }
  ObstacleRange_(const ContainerAllocator& _alloc)
    : Class(_alloc)
    , xmin(0.0)
    , ymin(0.0)
    , zmin(0.0)
    , xmax(0.0)
    , ymax(0.0)
    , zmax(0.0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Class_type;
  _Class_type Class;

   typedef double _xmin_type;
  _xmin_type xmin;

   typedef double _ymin_type;
  _ymin_type ymin;

   typedef double _zmin_type;
  _zmin_type zmin;

   typedef double _xmax_type;
  _xmax_type xmax;

   typedef double _ymax_type;
  _ymax_type ymax;

   typedef double _zmax_type;
  _zmax_type zmax;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleRange_

typedef ::lidar_obstacle_detector::ObstacleRange_<std::allocator<void> > ObstacleRange;

typedef boost::shared_ptr< ::lidar_obstacle_detector::ObstacleRange > ObstacleRangePtr;
typedef boost::shared_ptr< ::lidar_obstacle_detector::ObstacleRange const> ObstacleRangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator1> & lhs, const ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator2> & rhs)
{
  return lhs.Class == rhs.Class &&
    lhs.xmin == rhs.xmin &&
    lhs.ymin == rhs.ymin &&
    lhs.zmin == rhs.zmin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymax == rhs.ymax &&
    lhs.zmax == rhs.zmax &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator1> & lhs, const ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_obstacle_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95436a53898d7edf4410a79f8f877033";
  }

  static const char* value(const ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95436a53898d7edfULL;
  static const uint64_t static_value2 = 0x4410a79f8f877033ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_obstacle_detector/ObstacleRange";
  }

  static const char* value(const ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Class\n"
"float64 xmin\n"
"float64 ymin\n"
"float64 zmin\n"
"float64 xmax\n"
"float64 ymax\n"
"float64 zmax\n"
"geometry_msgs/Point[] points\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Class);
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.zmin);
      stream.next(m.xmax);
      stream.next(m.ymax);
      stream.next(m.zmax);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleRange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_obstacle_detector::ObstacleRange_<ContainerAllocator>& v)
  {
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Class);
    s << indent << "xmin: ";
    Printer<double>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<double>::stream(s, indent + "  ", v.ymin);
    s << indent << "zmin: ";
    Printer<double>::stream(s, indent + "  ", v.zmin);
    s << indent << "xmax: ";
    Printer<double>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<double>::stream(s, indent + "  ", v.ymax);
    s << indent << "zmax: ";
    Printer<double>::stream(s, indent + "  ", v.zmax);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_OBSTACLE_DETECTOR_MESSAGE_OBSTACLERANGE_H
