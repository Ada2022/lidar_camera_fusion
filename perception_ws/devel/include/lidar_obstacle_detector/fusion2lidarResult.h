// Generated by gencpp from file lidar_obstacle_detector/fusion2lidarResult.msg
// DO NOT EDIT!


#ifndef LIDAR_OBSTACLE_DETECTOR_MESSAGE_FUSION2LIDARRESULT_H
#define LIDAR_OBSTACLE_DETECTOR_MESSAGE_FUSION2LIDARRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lidar_obstacle_detector/Obstacles.h>

namespace lidar_obstacle_detector
{
template <class ContainerAllocator>
struct fusion2lidarResult_
{
  typedef fusion2lidarResult_<ContainerAllocator> Type;

  fusion2lidarResult_()
    : obstacles()  {
    }
  fusion2lidarResult_(const ContainerAllocator& _alloc)
    : obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef  ::lidar_obstacle_detector::Obstacles_<ContainerAllocator>  _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> const> ConstPtr;

}; // struct fusion2lidarResult_

typedef ::lidar_obstacle_detector::fusion2lidarResult_<std::allocator<void> > fusion2lidarResult;

typedef boost::shared_ptr< ::lidar_obstacle_detector::fusion2lidarResult > fusion2lidarResultPtr;
typedef boost::shared_ptr< ::lidar_obstacle_detector::fusion2lidarResult const> fusion2lidarResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator1> & lhs, const ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator2> & rhs)
{
  return lhs.obstacles == rhs.obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator1> & lhs, const ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_obstacle_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12f6f75231b17523dfa33b84d74feebd";
  }

  static const char* value(const ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12f6f75231b17523ULL;
  static const uint64_t static_value2 = 0xdfa33b84d74feebdULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_obstacle_detector/fusion2lidarResult";
  }

  static const char* value(const ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result definition\n"
"lidar_obstacle_detector/Obstacles obstacles\n"
"\n"
"\n"
"================================================================================\n"
"MSG: lidar_obstacle_detector/Obstacles\n"
"Obstacle[] obstacles\n"
"\n"
"================================================================================\n"
"MSG: lidar_obstacle_detector/Obstacle\n"
"string Class\n"
"float64 xCenter\n"
"float64 yCenter\n"
"float64 zCenter\n"
"float64 width\n"
"float64 length\n"
"float64 height\n"
"\n"
;
  }

  static const char* value(const ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fusion2lidarResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_obstacle_detector::fusion2lidarResult_<ContainerAllocator>& v)
  {
    s << indent << "obstacles: ";
    s << std::endl;
    Printer< ::lidar_obstacle_detector::Obstacles_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_OBSTACLE_DETECTOR_MESSAGE_FUSION2LIDARRESULT_H
